/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.PreviewRenderingRef;
import io.swagger.model.Project;
import io.swagger.model.ProjectGenerator;
import org.springframework.core.io.Resource;
import io.swagger.model.SearchResult;
import io.swagger.model.User;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-02T16:06:11.495Z")

@Api(value = "api", description = "the api API")
public interface ApiApi {

    @ApiOperation(value = "", notes = "Generates a sample project from your parameters ", response = Resource.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = Resource.class),
        @ApiResponse(code = 201, message = "User created", response = Boolean.class) })
    
    @RequestMapping(value = "/api/generateproject",
        produces = { "application/octet-stream" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Resource> apiGenerateprojectPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProjectGenerator body);


    @ApiOperation(value = "", notes = "Gets a project informations ", response = Project.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = Project.class),
        @ApiResponse(code = 204, message = "The content of the project is not valid", response = Error.class),
        @ApiResponse(code = 404, message = "Project does not exist", response = String.class),
        @ApiResponse(code = 500, message = "Project rendering error", response = Error.class) })
    
    @RequestMapping(value = "/api/newproject",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Project> apiNewprojectGet( @NotNull@ApiParam(value = "The url of the project description file", required = true) @RequestParam(value = "url", required = true) String url);


    @ApiOperation(value = "", notes = "Registration service ", response = Resource.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = Resource.class),
        @ApiResponse(code = 201, message = "User created", response = Boolean.class) })
    
    @RequestMapping(value = "/api/preview",
        produces = { "image/svg+xml" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Resource> apiPreviewPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PreviewRenderingRef body);


    @ApiOperation(value = "", notes = "Gets a project informations ", response = Project.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = Project.class),
        @ApiResponse(code = 204, message = "The content of the project is not valid", response = Error.class),
        @ApiResponse(code = 404, message = "Project does not exist", response = String.class),
        @ApiResponse(code = 500, message = "Project rendering error", response = Error.class) })
    
    @RequestMapping(value = "/api/project",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Project> apiProjectGet( @NotNull@ApiParam(value = "The id of the project", required = true) @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "", notes = "Registration service ", response = Boolean.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created", response = Boolean.class) })
    
    @RequestMapping(value = "/api/register",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Boolean> apiRegisterPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "", notes = "Registration service ", response = Resource.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = Resource.class),
        @ApiResponse(code = 201, message = "User created", response = Boolean.class) })
    
    @RequestMapping(value = "/api/render",
        produces = { "application/octet-stream" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Resource> apiRenderPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PreviewRenderingRef body);


    @ApiOperation(value = "", notes = "Searches for projects ", response = SearchResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SearchResult.class),
        @ApiResponse(code = 500, message = "Search error", response = Error.class) })
    
    @RequestMapping(value = "/api/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SearchResult> apiSearchGet( @NotNull@ApiParam(value = "The search query", required = true) @RequestParam(value = "fulltextquery", required = true) String fulltextquery);

}
